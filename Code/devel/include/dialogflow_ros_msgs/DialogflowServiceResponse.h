// Generated by gencpp from file dialogflow_ros_msgs/DialogflowServiceResponse.msg
// DO NOT EDIT!


#ifndef DIALOGFLOW_ROS_MSGS_MESSAGE_DIALOGFLOWSERVICERESPONSE_H
#define DIALOGFLOW_ROS_MSGS_MESSAGE_DIALOGFLOWSERVICERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dialogflow_ros_msgs/DialogflowResult.h>

namespace dialogflow_ros_msgs
{
template <class ContainerAllocator>
struct DialogflowServiceResponse_
{
  typedef DialogflowServiceResponse_<ContainerAllocator> Type;

  DialogflowServiceResponse_()
    : success(false)
    , result()  {
    }
  DialogflowServiceResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , result(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef  ::dialogflow_ros_msgs::DialogflowResult_<ContainerAllocator>  _result_type;
  _result_type result;





  typedef boost::shared_ptr< ::dialogflow_ros_msgs::DialogflowServiceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dialogflow_ros_msgs::DialogflowServiceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct DialogflowServiceResponse_

typedef ::dialogflow_ros_msgs::DialogflowServiceResponse_<std::allocator<void> > DialogflowServiceResponse;

typedef boost::shared_ptr< ::dialogflow_ros_msgs::DialogflowServiceResponse > DialogflowServiceResponsePtr;
typedef boost::shared_ptr< ::dialogflow_ros_msgs::DialogflowServiceResponse const> DialogflowServiceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dialogflow_ros_msgs::DialogflowServiceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dialogflow_ros_msgs::DialogflowServiceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dialogflow_ros_msgs::DialogflowServiceResponse_<ContainerAllocator1> & lhs, const ::dialogflow_ros_msgs::DialogflowServiceResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.result == rhs.result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dialogflow_ros_msgs::DialogflowServiceResponse_<ContainerAllocator1> & lhs, const ::dialogflow_ros_msgs::DialogflowServiceResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dialogflow_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dialogflow_ros_msgs::DialogflowServiceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dialogflow_ros_msgs::DialogflowServiceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dialogflow_ros_msgs::DialogflowServiceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dialogflow_ros_msgs::DialogflowServiceResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dialogflow_ros_msgs::DialogflowServiceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dialogflow_ros_msgs::DialogflowServiceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dialogflow_ros_msgs::DialogflowServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c95c5dffc4f22b0fa3bc4010eb94bc9c";
  }

  static const char* value(const ::dialogflow_ros_msgs::DialogflowServiceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc95c5dffc4f22b0fULL;
  static const uint64_t static_value2 = 0xa3bc4010eb94bc9cULL;
};

template<class ContainerAllocator>
struct DataType< ::dialogflow_ros_msgs::DialogflowServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dialogflow_ros_msgs/DialogflowServiceResponse";
  }

  static const char* value(const ::dialogflow_ros_msgs::DialogflowServiceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dialogflow_ros_msgs::DialogflowServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success\n"
"DialogflowResult result\n"
"\n"
"================================================================================\n"
"MSG: dialogflow_ros_msgs/DialogflowResult\n"
"string action\n"
"string query_text\n"
"string fulfillment_text\n"
"DialogflowParameter[] parameters\n"
"DialogflowContext[] contexts\n"
"string intent\n"
"================================================================================\n"
"MSG: dialogflow_ros_msgs/DialogflowParameter\n"
"string param_name\n"
"string[] value\n"
"================================================================================\n"
"MSG: dialogflow_ros_msgs/DialogflowContext\n"
"string name\n"
"int32 lifespan_count\n"
"DialogflowParameter[] parameters\n"
;
  }

  static const char* value(const ::dialogflow_ros_msgs::DialogflowServiceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dialogflow_ros_msgs::DialogflowServiceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DialogflowServiceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dialogflow_ros_msgs::DialogflowServiceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dialogflow_ros_msgs::DialogflowServiceResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "result: ";
    s << std::endl;
    Printer< ::dialogflow_ros_msgs::DialogflowResult_<ContainerAllocator> >::stream(s, indent + "  ", v.result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIALOGFLOW_ROS_MSGS_MESSAGE_DIALOGFLOWSERVICERESPONSE_H
