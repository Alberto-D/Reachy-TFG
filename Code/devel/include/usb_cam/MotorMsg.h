// Generated by gencpp from file usb_cam/MotorMsg.msg
// DO NOT EDIT!


#ifndef USB_CAM_MESSAGE_MOTORMSG_H
#define USB_CAM_MESSAGE_MOTORMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace usb_cam
{
template <class ContainerAllocator>
struct MotorMsg_
{
  typedef MotorMsg_<ContainerAllocator> Type;

  MotorMsg_()
    : x_sector(0)
    , y_sector(0)
    , x(0)
    , y(0)
    , motor_action()  {
    }
  MotorMsg_(const ContainerAllocator& _alloc)
    : x_sector(0)
    , y_sector(0)
    , x(0)
    , y(0)
    , motor_action(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _x_sector_type;
  _x_sector_type x_sector;

   typedef int64_t _y_sector_type;
  _y_sector_type y_sector;

   typedef int64_t _x_type;
  _x_type x;

   typedef int64_t _y_type;
  _y_type y;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _motor_action_type;
  _motor_action_type motor_action;





  typedef boost::shared_ptr< ::usb_cam::MotorMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::usb_cam::MotorMsg_<ContainerAllocator> const> ConstPtr;

}; // struct MotorMsg_

typedef ::usb_cam::MotorMsg_<std::allocator<void> > MotorMsg;

typedef boost::shared_ptr< ::usb_cam::MotorMsg > MotorMsgPtr;
typedef boost::shared_ptr< ::usb_cam::MotorMsg const> MotorMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::usb_cam::MotorMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::usb_cam::MotorMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::usb_cam::MotorMsg_<ContainerAllocator1> & lhs, const ::usb_cam::MotorMsg_<ContainerAllocator2> & rhs)
{
  return lhs.x_sector == rhs.x_sector &&
    lhs.y_sector == rhs.y_sector &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.motor_action == rhs.motor_action;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::usb_cam::MotorMsg_<ContainerAllocator1> & lhs, const ::usb_cam::MotorMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace usb_cam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::usb_cam::MotorMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::usb_cam::MotorMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::usb_cam::MotorMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::usb_cam::MotorMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::usb_cam::MotorMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::usb_cam::MotorMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::usb_cam::MotorMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d31343a4c82aa80a88c6a541c909111d";
  }

  static const char* value(const ::usb_cam::MotorMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd31343a4c82aa80aULL;
  static const uint64_t static_value2 = 0x88c6a541c909111dULL;
};

template<class ContainerAllocator>
struct DataType< ::usb_cam::MotorMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "usb_cam/MotorMsg";
  }

  static const char* value(const ::usb_cam::MotorMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::usb_cam::MotorMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 x_sector\n"
"int64 y_sector\n"
"int64 x\n"
"int64 y\n"
"string motor_action\n"
;
  }

  static const char* value(const ::usb_cam::MotorMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::usb_cam::MotorMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_sector);
      stream.next(m.y_sector);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.motor_action);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::usb_cam::MotorMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::usb_cam::MotorMsg_<ContainerAllocator>& v)
  {
    s << indent << "x_sector: ";
    Printer<int64_t>::stream(s, indent + "  ", v.x_sector);
    s << indent << "y_sector: ";
    Printer<int64_t>::stream(s, indent + "  ", v.y_sector);
    s << indent << "x: ";
    Printer<int64_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int64_t>::stream(s, indent + "  ", v.y);
    s << indent << "motor_action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.motor_action);
  }
};

} // namespace message_operations
} // namespace ros

#endif // USB_CAM_MESSAGE_MOTORMSG_H
